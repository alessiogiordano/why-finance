//
//  circuit_breaker.proto
//  Progetto di Distributed Systems and Big Data
//  Anno Accademico 2024-25
//  (C) 2024 Luca Montera, Alessio Giordano
//
//  Created by Alessio Giordano on 21/11/24.
//

syntax = "proto3";
import "http.proto";

service CircuitBreaker {
    // Manual get/set
    rpc status(CircuitBreakerStatusRequest) returns (CircuitBreakerStatusResponse);
    rpc success(CircuitBreakerStatusRequest) returns (CircuitBreakerStatusResponse);
    rpc failure(CircuitBreakerStatusRequest) returns (CircuitBreakerStatusResponse);
    // Delegated HTTP client
	rpc send(CircuitBreakerHTTPRequest) returns (CircuitBreakerHTTPResponse);
}

enum CircuitBreakerStatus {
    CircuitBreaker_CLOSED = 0;
    CircuitBreaker_HALF_OPEN = 1;
    CircuitBreaker_OPEN = 2;
}

message CircuitBreakerStatusRequest {
    string host = 1; // e.g. 'example.com'
    uint32 threshold = 2; // Consecutive failures triggering the opening of the circuit
    uint32 recovery = 3; // Seconds to wait in open circuit
}

message CircuitBreakerStatusResponse {
    string host = 1; // e.g. 'example.com'
    CircuitBreakerStatus status = 2;
    uint32 wait = 3; // Seconds remaining in open circuit
}

message CircuitBreakerHTTPRequest {
    string id = 1; // At-most-once
    repeated HTTPStatusCode expected = 2;  // List of status codes for a successful request
    uint32 timeout = 3; // HTTP request timeout
    uint32 threshold = 4; // Consecutive failures triggering the opening of the circuit
    uint32 recovery = 5; // Seconds to wait in open circuit
    HTTPRequest http = 6; // See http.proto
}

message CircuitBreakerHTTPResponse {
    string id = 1; // At-most-once
    CircuitBreakerStatus status = 2;
    uint32 wait = 3; // Seconds remaining in open circuit
    HTTPResponse http = 4; // See http.proto
}